#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define SYM  1
#define NAV  2
#define ADJ  3
#define MOD  4

&lt {
    require-prior-idle-ms = <100>;
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};

&mt {
    quick-tap-ms = <200>;
};

/* &soft_off { */
/*     hold-time-ms = <5000>; // Activate soft off after holding for 5 secs. */
/* }; */

// &sk {
//     release-after-ms = <500>;
//     quick-release;
// };

/ {
    combos {
        //  0  1  2  3  4      5  6  7  8  9
        // 10 11 12 13 14     15 16 17 18 19
        // 20 21 22 23 24     25 26 27 28 29
        //          30 31     32 33

        compatible = "zmk,combos";

        // Home row mods (left)
        combo_lctrl {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <12 13>;
            bindings = <&kp LCTRL>;
        };
        combo_lgui {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <11 12>;
            bindings = <&kp LGUI>;
        };
        combo_lalt {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <10 11>;
            bindings = <&kp LALT>;
        };
        combo_lshift_lctrl {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <11 12 13>;
            bindings = <&kp LS(LCTRL)>;
        };
        combo_lshift_lgui {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <10 11 12>;
            bindings = <&kp LS(LGUI)>;
        };

        // Home row mods (right)
        combo_rctrl {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <16 17>;
            bindings = <&kp RCTRL>;
        };
        combo_rgui {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
        combo_ralt {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <18 19>;
            bindings = <&kp RALT>;
        };
        combo_rshift_rctrl {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <16 17 18>;
            bindings = <&kp RS(RCTRL)>;
        };
        combo_rshift_rgui {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <17 18 19>;
            bindings = <&kp RS(RGUI)>;
        };

        // Layers
        combo_sl_adj {
            layers = <0>;
            key-positions = <6 7 8 9>;
            bindings = <&sl ADJ>;
        };

        // Keypresses
        combo_esc {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <30 33>;
            bindings = <&kp ESC>;
        };
        combo_studio_unlock {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <8 9>;
            bindings = <&studio_unlock>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
            &kp B  &kp L  &kp D  &kp C      &kp V                     &kp J    &kp F    &kp O      &kp U       &kp COMMA
            &kp N  &kp R  &kp T  &kp S      &kp G                     &kp Y    &kp H    &kp A      &kp E       &kp I
            &kp X  &kp Q  &kp M  &kp W      &kp Z                     &kp K    &kp P    &kp SQT    &kp SEMI    &kp DOT
                                 &kp SPACE  &mt LSHIFT BSPC           &mo SYM  &lt NAV RET
            >;
        };

        sym {
            bindings = <
            &kp N1  &kp N2  &kp N3  &kp N4    &kp N5                &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
            &trans  &trans  &trans  &kp LBKT  &kp LBRC              &trans  &trans  &trans  &trans  &trans
            &trans  &trans  &trans  &kp RBKT  &kp RBRC              &trans  &trans  &trans  &trans  &trans
                                    &trans    &kp DEL               &trans  &trans
            >;
        };

        nav {
            bindings = <
            &trans  &trans &trans   &trans    &trans               &trans    &trans    &trans  &trans    &trans
            &kp TAB &trans &kp HOME &kp PG_UP &trans               &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT &kp ESC
            &trans  &trans &kp END  &kp PG_DN &trans               &trans    &kp LEFT  &trans  &trans    &trans
                                    &trans    &kp DEL              &trans    &trans
            >;
        };

        adj {
            bindings = <
            &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_CLR_ALL          &trans      &kp C_BRI_DN  &kp C_BRI_UP  &trans  &trans
            &studio_unlock  &trans          &trans          &trans          &trans                  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &trans  &trans
            &bootloader     &trans          &trans          &trans          &trans                  &trans      &trans        &trans        &trans  &bootloader
                                                            &trans          &to BASE                &trans      &trans
            >;
        };

        mod {
            bindings = <
            &kp TAB   &trans &trans &trans &trans                  &trans &trans &trans &trans &kp MINUS
            &kp LCTRL &trans &trans &trans &trans                  &trans &trans &trans &trans &kp FSLH
            &kp BSLH  &trans &trans &trans &trans                  &trans &trans &trans &trans &kp ENTER
                                    &trans &trans                  &trans &trans
            >;
        };
    };
};
